// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id    Int     @id @default(autoincrement())
  name  String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation avec l'utilisateur qui a créé le produit
  createdBy   User? @relation(fields: [createdById], references: [id])
  createdById String?

  @@map("products")
}

// Modèles d'authentification NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Pour l'authentification locale
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // user, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations NextAuth
  accounts Account[]
  sessions Session[]

  // Relations avec les produits
  products Product[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}